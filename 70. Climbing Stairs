//https://leetcode.com/problems/climbing-stairs/

//Bottom approach without optimization.
// Time: O(n), Space: O(n)

class Solution {
    public int climbStairs(int n) {
       if(n<=1){
           return 1;
       }
        
        int[] dp = new int[n+1];
        
        dp[1] = 1;
        dp[2] = 2;
        
        for(int i=3; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        
        return dp[n];
    }
}


//Bottom approach with optimization.
// Time: O(n), Space: O(1)

class Solution {
    public int climbStairs(int n) {
       if(n<=1){
           return 1;
       }
        
        int prev1 = 1;
        int prev2 = 2;
        
        for(int i=3; i<=n; i++){
            int tempValue = prev1 + prev2;
            prev1 = prev2;
            prev2 = tempValue; 
        }
        
        return prev2;
    }
}
